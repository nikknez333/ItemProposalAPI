// <auto-generated />
using System;
using ItemProposalAPI.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ItemProposalAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250110070620_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ItemProposalAPI.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Creation_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Share_Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("ItemProposalAPI.Models.ItemParty", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "PartyId");

                    b.HasIndex("PartyId");

                    b.ToTable("ItemParties");
                });

            modelBuilder.Entity("ItemProposalAPI.Models.Party", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("ItemProposalAPI.Models.Proposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CounterToProposalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Proposal_Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CounterToProposalId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Proposal", t =>
                        {
                            t.HasCheckConstraint("CK_Proposal_Comment_Required", "CounterToProposalId is NULL OR LEN(Comment) > 0");
                        });
                });

            modelBuilder.Entity("ItemProposalAPI.Models.ProposalItemParty", b =>
                {
                    b.Property<int>("ProposalId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProposalId", "ItemId", "PartyId");

                    b.HasIndex("ItemId", "PartyId");

                    b.ToTable("ProposalItemParties");
                });

            modelBuilder.Entity("ItemProposalAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("PartyId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ItemProposalAPI.Models.ItemParty", b =>
                {
                    b.HasOne("ItemProposalAPI.Models.Item", "Item")
                        .WithMany("ItemParties")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItemProposalAPI.Models.Party", "Party")
                        .WithMany("ItemParties")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("ItemProposalAPI.Models.Proposal", b =>
                {
                    b.HasOne("ItemProposalAPI.Models.Proposal", "InitialProposal")
                        .WithMany("CounterProposals")
                        .HasForeignKey("CounterToProposalId");

                    b.HasOne("ItemProposalAPI.Models.Item", "Item")
                        .WithMany("Proposals")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItemProposalAPI.Models.User", "User")
                        .WithMany("Proposals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InitialProposal");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ItemProposalAPI.Models.ProposalItemParty", b =>
                {
                    b.HasOne("ItemProposalAPI.Models.Proposal", "Proposal")
                        .WithMany("ProposalItemParties")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ItemProposalAPI.Models.ItemParty", "ItemParty")
                        .WithMany("ProposalItemParties")
                        .HasForeignKey("ItemId", "PartyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ItemParty");

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("ItemProposalAPI.Models.User", b =>
                {
                    b.HasOne("ItemProposalAPI.Models.Party", "Party")
                        .WithMany("Users")
                        .HasForeignKey("PartyId");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("ItemProposalAPI.Models.Item", b =>
                {
                    b.Navigation("ItemParties");

                    b.Navigation("Proposals");
                });

            modelBuilder.Entity("ItemProposalAPI.Models.ItemParty", b =>
                {
                    b.Navigation("ProposalItemParties");
                });

            modelBuilder.Entity("ItemProposalAPI.Models.Party", b =>
                {
                    b.Navigation("ItemParties");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ItemProposalAPI.Models.Proposal", b =>
                {
                    b.Navigation("CounterProposals");

                    b.Navigation("ProposalItemParties");
                });

            modelBuilder.Entity("ItemProposalAPI.Models.User", b =>
                {
                    b.Navigation("Proposals");
                });
#pragma warning restore 612, 618
        }
    }
}
